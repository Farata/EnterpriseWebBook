#Chapter 3. Advanced Intro to JavaScript

This chapter is dedicated to the JavaScript programming language.  Our challenging goal is “From Zero to Hero in 50 pages”.  While in the future chapters you'll see how JavaScript frameworks can greatly minimize the amount of the JavaScript code that you need to write manually, you still need to understand the language itself. At least you should be able to read JavaScript code. 
This chapter starts with basics of the language, but then it quickly progresses to such advanced topics as prototypal inheritance, callbacks and closures. If you prefer more fundamental and detail-oriented way of learning programming languages, read the book “Modern JavaScript. Develop and Design” by Larry Ullman or “JavaScript: The Definite Guide”, Sixth Edition by David Flanagan. 
Besides the JavaScript coverage this chapter includes an important section on the tools (IDEs, debuggers, Web inspectors et al) that will make your development process more productive. 
By the end of this chapter we'll create the first implementation of the Web site Save a Child designed in Chapter 2. This version of the Web site will include some JavaScript code. All the data for this this Web site will be stored in a plain text format in local files.

##JavaScript: A Brief History

The JavaScript programming language was designed by Brendan Eich from Netscape in 1995. The goal was to allow developers create more interactive Web pages. Initially the name of this language was Mocha, then LiveScript, and finally Netscape agreed with Sun Microsystems, creator of Java (another new at the time language) to rename it to JavaScript.  A year later, the language was given to an international standards body called ECMA, which formalized the language into the ECMAScript standard so that other vendors could create their implementation of this standard. ActionScript is a good example of another popular dialect of ECMAScript.  

To learn more about the history of JavaScript from the source watch the Brendan Eich's presentation ["JavaScript at 17"](http://www.youtube.com/watch?v=Rj49rmc01Hs) at O'Reilly's conference Fluent 2012. 
Although the vast majority of today's JavaScript code is being executed by the Web browsers some third-party tools also include JavaScript engines and Google's V8 engine is a place to run JavaScript on the server. The server-side JavaScript framework node.js is getting popularity. Using the same programming language on the client and the server is the main selling point of node.js. Oracle's Java SE 8 will include the new JavaScript engine Nashorn that can run on both – the server and the client computers.

In the 90th, JavaScript was considered a second class language used mainly for prettifying Web pages. In the beginning of the 21st Century the techniques known as AJAX (described in Chapter 4) made a significant impact to the way Web pages were built allowing updating the information inside the Web page without the need to make a full page refresh.  Even though AJAX saved JavaScript, the vendors of Web browsers were no eager to implement the latest specifications of ECMAScript.  Browsers' incompatibility and lack of good development tools continued preventing JavaScript to become the language of choice for Web applications. Let's not forget about the ubiquitous Flash Player – an excellent VM supported by all Web browsers. Rich Internet Applications written in ActionScript were compiled into the byte code and executed by Flash Player on the user's machine. 

If AJAX saved JavaScript, then rapid proliferation of tablets and smartphones made it really hot. Mobile devices come with modern Web browsers and there is no need to make sure that your Web application will work in the 11 year old Internet Explorer 6. The fact that Flash Player won't be supported in the mobile Web browsers is yet another reason to turn to JavaScript if your Web application has to be accessed from smartphones or tablets. The ECMASript, 5th Edition has been published in 2009 and is currently supported by most of the modern Web browsers. If you are interested in discovering if specific features of ECMAScript 5 are supported by a particular Web browser, check the latest version of the [ECMAScript 5 compatibility table](http://kangax.github.com/es5-compat-table/#). At the time of this writing it looks as follows (it's a snapshot of the Chrome Browser v. 21):
  
JavaScript became the lowest common denominator available on thousands of different devices. Yes, the JavaScript engines are not 100% compatible on about 2500 devices that people use to login to Facebook, but they are pretty close, and using some of the JavaScript frameworks spare you from worrying about this.
 

##JavaScript Basics

JavaScript is an interpreted language that arrives to the place of execution as text. If it's a part of the Web page, the browser will load and execute the JavaScript code embedded between the tags `<script>`  and `</script>` or linked from external files. The modern browsers (except Internet Explorer 8 and older) will also automatically perform the Just In Time (JIT) compilation of the JavaScript into machine code.
JavaScript was originally created for Web browsers, which were supposed to show/use whatever content has successfully arrived. What if an image has not arrived from the server? You'll see a broken image icon. What if not all JavaScript code has arrived to the browser? Well, it'll try to execute whatever has arrived.  The end users may appreciate such forgiveness, but the software developers should be ready to spend more time debugging runtime errors that could have been caught by compilers in other programming languages. 
JavaScript is a weakly typed language hence the developers don't have a luxury of strong compiler's help that Java or C# developers enjoy.  This is easily explainable. Imaging that if in Java or C# instead of declaring variables of specific data types everything would be of type Object and you could assign  to it any value – a string, a number, or a custom object Person. This would substantially complicate the ability of the compiler to weed out all possible errors. 
You don't need to declare variables in JavaScript – just assign a value and the JavaScript engine will figure out the proper type during the execution of your code. For example, the variable named girlfriend will have a data type of String:

    girlfriendName=“Mary”;

Since I haven't use the keyword var in front of girlfriend this variable will have the global scope. Variables declared with var inside functions are local. Consider the following  function declaration:

    function addPersonalInfo(){
       var address =“123 Main Street”;      // local String variable
       age=25;                              // global Number variable 
       var isMarried = true;                // local boolean variable
           isMarried = “don't remember”;    // now it's of String type
    }

The variables address and isMarried are visible only inside the function `addPersonalInfo()`.  The variable age becomes global because of omission of the keyword var. The variable isMarried changes its type from Boolean to String  during the execution and JavaScript engine won't complain assuming that the programmer knows what she's doing. So be ready for the run-time surprises and allocate a lot more time for testing comparing to compiled languages.
Yet another moving part is the JavaScript engine where your code will run. Unless you are developing for strictly controlled enterprise environment you can't assume that the end-user will have the same runtime as yours.  This is yet another reason to test your code in multiple Web browsers. 

##Which IDE to Use

Selecting an Integrated Development Environment (IDE) that supports JavaScript is a matter of your personal preference. Since there is no compilation stage and most of your debugging will be done using the Web browser tools, picking a text editor that supports syntax highlighting is all that some developers need.  For example, there is an excellent commercial text editor [Sublime Text 2](http://www.sublimetext.com).  Among many programming languages this editor understands HTML, CSS, and JavaScript, and it offers not only syntax highlighting, context sensitive help, and autocomplete too.

If you are coming from the Java background, the chances are that you are familiar with free and open source Eclipse IDE. In this case you can consider either use [Eclipse for Java EE developers](http://www.eclipse.org/downloads)  or [Aptana Studio 3 IDE](http://aptana.com). Aptana Studio is available free of charge. It's Eclipse-based IDE for JavaScript developers. Aptana Studio comes with embedded Web Server so you can test your JavaScript code without the need to start any additional software. In this and the following chapter we'll use Aptana Studio IDE to illustrate the features of JavaScript and start working on the prototype of the Web application Save a Child. 

For the real world development we recommend using a commercial [IDE WebStorm](http://www.jetbrains.com/webstorm) from JetBrains. In addition to smart context sensitive help, auto-complete, and syntax highlighting it offers HTML5 templates, a code coverage feature for unit testing that identifies the code fragment that haven't been tested. All of the editors and IDEs listed here are either available for free or are priced in the area of $60 USD.Try them all and pick the one that best fits your coding habits.

##Getting Familiar with Aptana IDE

Download and install Aptana Studio 3 from [http://aptana.com](http://aptana.com).  Start Aptana and customize the color theme of this IDE by clicking the rainbow-colored circle on its toolbar. Since the author of this book are accustomed to Eclise IDE we select the theme that's called Eclipse. 
After the initial installed of Aptana you'll see the message that on the left that reads “There are no projects in your workspace. To get started, please create or import an existing one.”  Just press the button Create Project located right under this message.  You could have also created a new Web Project using the File menu. 

##JavaScript in the Web Browser

After learning all these facts and techniques about the language you might be eager to see «the real use of JavaScript» – manipulating HTML elements of Web pages, which most of the people use JavaScript for. This is correct, at least today. In this section we'll be doing exactly this – applying JavaScript code to HTML elements.

First let's consider the operations we need to be able to perform inside the Web page:
- Programmatically finding the required element by id, type, or a CSS class.
- Changing styles of the elements (show, hide, apply fonts and colors et al.)
- Processing events that may happen to HTML elements (click, mouseover et al.)
- Dynamically adding or removing HTML elements from the page or changing their contents
- Communicating with the server side, e.g. form submission or making AJAX requests to request some data from the server

You'll need to understand how to perform these operations from JavaScript. Even if you'll be using one of the popular frameworks, you'll be performing the same operations applying the syntax prescribed by your framework of choice. So let's get started. 

##Styling Web Pages with CSS

CSS stands for Cascading Style Sheets. During the last 15 years several CSS specifications reached the level of Recommendation by W3C: CSS Level 1, 2, and 2.1. The latest CSS Level 3 (a.k.a. CSS3) adds new features to CSS 2.1 module by module, which are listed at [http://www.w3.org/Style/CSS/current-work](http://www.w3.org/Style/CSS/current-work). In this book we'll be using only the modules Fonts, Media Queries, and Backgrounds and Borders. 
Brief CSS tutorial and reference is located at http://www.w3schools.com/cssref/default.asp  

You can include CSS into a Web page either by linking to separate files using the HTML tag `<link>` or by in-lining the styles with the tag `<style>`. For example, if CSS is located in the file `mystyles.css` in the folder css add the following tag to HTML:

    <link rel="stylesheet" type="text/css" href="css/mystyles.css" media="all">

The `<link>` tag allows specifying the media where specific css file has to be used. For example, you can have one CSS file for smartphones and another one for tablets. We'll discuss this in detail in the section on media queries in Chapter 11.

You should put this tag in the <head> section of your HTML before any JavaScript code to make sure that they stiles are loaded before the content of the Web page.  

Placing the `@import` attribute inside the `<style>` tag allows to include styles located elsewhere:

    <style>
       @import url (css/contactus.css)
    </style>

What's the best way of including CSS in HTML? From one hand, keeping CSS in multiple files separately form HTML and JavaScript makes the code more readable and reusable. On the other hand, when if your Web site has consists of many files, the Web browser will have to make multiple rundtrips to your server just to load the page, which can slow down the responsiveness of your Web application.