== Responsive Design: One Site Fits All

Up till now we've been writing and re-writing the desktop version of the Save Sick Child application. Will it look good on the small screen of a mobile device? 

Let's discuss different approaches to making the Web site for mobile devices. One of the approaches is having only one Web site for all devices. There are three choices:

1. Develop separate version of native applications for each mobile device. Developing of native mobile applications is not covered in this book.

2. Develop one HTML5 Web application, but create several different UI layouts that will be applied automatically based on the screen size of the user's device.

3. Develop a _hybrid application_, which is a Web application on steroids - it can invoke native API of the mobile device. Chapter 14 is dedicated to hybrid applications.

The chapter is about the second approach called _Responsive Design_. This term was coined by Ethan Marcotte is the article http://www.alistapart.com/articles/responsive-web-design/[Responsive Web Design]. The design of the Web page changed responding to the current display size. We'll modify the design of the Save Sick Child site to introduce different layouts for the desktop, tablet, and smart phones. By the end of this chapter the site Save Sick Child will automatically change its layout based on the user's device without the losing functionality. 


=== One or Two Versions of Code?

Run any of the versions of our Save Sick Child applications on your desktop and start dragging the right border of the browser's window to make it narrower. At some point you'll see only a part of the content - the layout of Save Sick Child is not responsive just yet. It defines fixed sizes for the page sections, which don't change event if the display area shrinks. 

Or enter the address of one of the http://savesickchild.org:8080/project-15-dynamic-content-modules/[Save Sick Child] projects in your mobile phone's browser. Either you'll see a partial content of the page or the entire page with illegible small fonts. At this point the only design of the Save Sick Child application doesn't look good on all devices. 

How many versions of the UI do we need to create then? People responsible for developing a Web application that can run on both desktop and mobile platforms usually start with making an important decision: HTML5 or native?  But even if a decision was made in the favor of the Web platform, the next question is if the desktop and mobile clients will use the same code or not. 

If a decision is made to go with separate versions of the Web applications, the Web server can be configured to perform the redirection to the appropriate code depending on the type of the user's device. Web servers can do it based on the value of the `User-Agent` attribute of the HTTP request header. For example, the mobile Web browsers trying to access of http://www.bbc.com/[BBC] (or any other Web page) report their `User-Agent` to the server differently from desktop computers  hence they receive different content delivered from a different URL. The snapshots <<FIG11-1>> and <<FIG11-2>> of the BBC main page were taken at the same time, but <<FIG11-1>> shows how the page looks on the desktop computer, while <<FIG11-2>> was taken from the iPhone. 

[[FIG11-1]]
.The desktop version of bbc.com
image::images/fig_11_01.jpg[]

The <<FIG11-1>> page layout delivers more content as it can be allocated nicely on the large desktop monitor or a tablet. But the mobile version on <<FIG11-2>> substantially limits what's delivered to the client, which is done not only because the screen is small, but the user may be accessing the page over the slower network.

[[FIG11-2]]
.The mobile version of bbc.com
image::images/fig_11_02.png[]

Have you ever tried to share the link of the Web site from your iPhone? It's so easy! Just press the button and enter the email of the person to share the site with. Go to bbc.com from your iPhone or Android phone and share this link with someone. That person will receive the link http://www.bbc.co.uk/mobile/i/[http://www.bbc.co.uk/mobile/i], and if she's visit this site from the desktop it won't look pretty. It'll just show the wider version of what you see in <<FIG11-2>>. Try to enter this URL in your desktop browser to see for yourself.

Maintaining two different versions of the application code requires more efforts than maintaining one: you need to have two sets of HTML, CSS, JavaScript, and images. Besides, most likely your Web application will use a  third-party JavaScript framework. At some point you may run into a bug and will need to upgrade the mobile version to use the latest version of, say jQuery framework. But the desktop version works just fine. In case of having two separate versions of the application you'll have to either upgrade jQuery and thoroughly test both mobile and desktop versions of Save Sick Child, or live with two different versions of the framework. 

Responsive design allows you to create one version of the Web application, which includes multiple sections of CSS controlling page layouts for different screen sizes. In this chapter we'll create yet another version of the  Save Sick Child application that will render UI differently on desktop and mobile devices. All these version will share the same HTML and JavaScript code, but will include several versions of styling using _CSS media queries_. 

There is a number of Web sites that were built using responsive design. Visit the following Web sites first from the desktop computer and then from smart phones (or just lower the width of the desktop browser window) to experience such fluid responsive design:

1. http://bostonglobe.com/[Boston Globe]
2. http://mashable.com/[Mashable]
3. http://cafeevoke.com/[Cafe Evoke]
4. http://www.fork-cms.com/[Fork CMS]
5. http://forefathersgroup.com/[Forefathers]


Note that each of these Web pages displays the content on the desktop in three different layouts (often in three imaginary columns). As you make the window narrower, the layout will automatically switch to the tablet or a large smartphone mode (usually two columns layout), and then to the phone mode layout (the one column layout). 

This sounds like a great solution, but keep in mind that your users will be downloading unnecessary bytes - the entire CSS file that includes all versions of screen layouts. This is not the case in the BBC example, which has different versions of the code that load only what's necessary for a particular device category.

Now comes the million dollar question, "Do we need to create two different versions of the Web application or twenty two?  Why not two hundred and twenty two?" How many different mobile devices are there today and will be there tomorrow?


==== How many User Agents are there

The HTTP header's attribute `User-Agent` contains information about the user agent originating request. Should you decide to create several versions of the UI based on the value in the `User-Agent` field, you can refer to the Web site http://useragentstring.com[http://useragentstring.com]. It lists not two, but hundreds of strings representing possible content of the `User-Agent` attribute for a variety of desktop and mobile devices. For example, <<FIG11-3>> shows how the `User-Agent` string from  iPhone5 is reported and explained by http://useragentstring.com/[useragentstring.com].


[[FIG11-3]]
.The User-Agent String from iPhone 5
image::images/fig_11_03.png[]


It's impossible to create different layouts of a Web application for thousands of user agents. Grouping devices by screen sizes is a more practical approach for lowering the number of UI layouts supported by your application. The responsive design is a collection of techniques based upon three pillars:

1. CSS _media queries_ 
2. _Fluid grids_ or fluid layouts
3. Fluid media 

Media queries allows to rearrange the sections (`<div>`'s') of the page based on the screen size, fluid grids allows to properly scale the content of these sections, and the fluid media is about resizing images or videos. But before going into technical details, let's get back to the mockups to see how the UI should look like on different devices.

=== Back to mockups

Jerry, our Web designer came up with another set of Balsamiq mockups for the Save Sick Child application. This time he had four different versions: desktop, tablet, large phone, and small phone. As a matter of fact, Jerry provided more mockups - the user can hold both smartphones and tablets either in portrait or landscape mode.  <<FIG11-4>>, <<FIG11-5>>, and <<FIG11-6>>, <<FIG11-7>> show the screenshots taken from Balsamiq Mockups for desktop, tablet, large, and small phone layouts. <<FIG11-4>> shows the desktop mockup.


[[FIG11-4]]
.The Desktop layout
image::images/fig_11_04.png[]

Jerry gave us several version of the images - with and without the grid background. The use of the grid will be explained later in the section "Fluid Grids". <<FIG11-5>> depicts the rendering on tablet devices that fall in a category of under 768px width screen in the portrait mode.

[[FIG11-5]]
.The tablet layout (portrait)
image::images/fig_11_05.png[]

Next comes the mockup for the large smart phones having the width of up to 640 pixels. <<FIG11-6>> shows two different images of the screen next to each other (the user would need to scroll to see the second image).

[[FIG11-6]]
.The large phone layout (portrait)
image::images/fig_11_06.png[]

The mockup for the smaller phones with the width of under 480 pixels is shown on <<FIG11-7>>. The mockup looks wide, but it actually shows three views of the phone screen next to each other. The user would need to scroll vertically to see the middle or the right view. Physical screens are not too small - iPhone 3 falls into this category, but resolution-wise they are smaller.

[[FIG11-7]]
.The small phone layout (portrait)
image::images/fig_11_07.png[]

If need be, you can ask Jerry to create mocupts for the really devices with the width under 320 pixels, but we won't even try it here. Now we need to translate these mockups into working code. The first subject to learn is CSS media queries.  

=== CSS Media Queries

First, let's see the CSS media queries in action, and then we'll explain how this magic was done. Run Aptana's project titled Responsive_basic_media_queries, and it'll look as in <<FIG11-8>>. This is a desktop version for the desktops (or some tablets in the landscape mode). The section chart, map, and video divide the window into three imaginary columns.

[[FIG11-8]]
.The tesktop layout implemented
image::images/fig_11_08.png[]

Drag the right border of your desktop Web browser's window to the left to make it narrower. After reaching certain _breakpoint width_ (in our project it's 768 pixels) you'll see how the `<div>`'s' reallocate themselves into the two-column window shown on <<FIG11-9>>.

[[FIG11-9]]
.The tablet layout (portrait) implemented
image::images/fig_11_09.png[]

Keep making the browser's window narrower, and when the width will pass another breakpoint (becomes less than 640 pixels), the window will re-arrange itself into one long column as in <<FIG11-10>>. The users will have to use scrolling to see the lower portion of this window, but they don't loose any content. 

TODO: Jerry wanted this layout for smaller phones. Need to add a new media query to CSS.

[[FIG11-10]]
.The smaller phone layout (portrait) implemented
image::images/fig_11_10.png[]

http://www.w3.org/TR/css3-mediaqueries/[Media Queries] is a W3C Recommendation that has been introduced in CSS2 and HTML4. The idea is to provide different stylesheets for different media. For example, you can specify different stylesheets in HTML using the `media` for the regular screen and for the smaller ones (up to 640 pixel in width).

[source, html]

----
<link rel="stylesheet" href="assets/css/style.css" media="screen">

<link rel="stylesheet" href="assets/css/style_small.css" media="only screen and (max-width: 640px)">
----

The other choice is to specify a section in a CSS file using the `@media` rule. For example, the following style will be applied to the HTML element with the `id=main-top-section` if the width of the display area is less than 640 pixels.

[source, html]
----
@media only screen and (max-width: 640px) {

  #main-top-section {
		width: 100%;
		float: none;
 }
}
----

The fragment of the CSS file styles.css from the project Responsive_basic_media_queries is shown next. It starts with defining styles for windows having 1280px width (we use 1140 pixels to leave some space for padding and browser's chrome). This CSS mandates to change the page layouts if the screen size is or becomes below 768 or 640 pixels. Based on your Web designer's recommendations you can specify as many breakout sizes as needed. Say, in the future, everyone will have at lease 1900px wide monitor - you can provide a layout that would use five imaginary columns. This can be a good idea for online newspapers or magazines, but Save Sick Child is not a publication so we keep its maximum width within 1140px. Or you may decide to make a version of Save Sick Child available for LCDs of only 320px in width - create a new media query section in your CSS and apply fluid grids to make the content readable. 

[source, html]
----

/* The main container width should to be 90% of viewport width but not wider than 1140px */
#main-container {
	width: 90%;
	max-width: 1140px;            // <1> 
	margin: 0 auto;
}

/* Background color of all elements was set just as an example */
header {
	background: #ccc;
	width: 100%;
	height: 80px;
}

#main-top-section {
	background: #bbb;
	width: 100%;
	height: 300px;
	position: relative;
}

#main-bottom-section {
	width: 100%;
}

#video-container, #map-container, #charts-container {
	width: 33.333%;                   // <2>
	padding-bottom: 33.333%;
	float: left;                      // <3> 
	position: relative;
}

#video, #map, #charts {
	background: #aaa;
	width: 100%;
	height: 100%;
	position: absolute;
	padding: 0.5em;
}

#map {
	background: #999;
}

#charts {
	background: #7d7d7d;
}

footer {
	background: #555;
	width: 100%;
	height: 80px;
	color: #fff;
}

/* media queries */

@media only screen and (max-width: 768px) {    // <4>
	#main-container {
		width: 98%
	}

	#main {
		background: #bbb;
	}

	#main-top-section, #main-bottom-section {
		width: 50%;                           // <5> 
		float: left;                          // <6> 
	}

	#main-top-section {
		height: 100%;
	}

	#video-container, #map-container, #charts-container {
		float: none;                         //   <7>
		width: 100%;
		padding-bottom: 70%;
	}

}

@media only screen and (max-width: 640px) {   //  <8>

	#main-top-section, #main-bottom-section {
		width: 100%;                          //  <9>
		float: none;                             
	}

	#main-top-section {
		height: 400px;
	}

	#video, #map, #charts {
		height: 60%;
	}
}
----

<1>  Setting the maximum width of the window on a desktop to 1140 pixels. It's safe to assume that any modern monitor supports the resolution of 1280px width (minus about 10% for padding and chrome).

<2>  Allocate one third of the width for video, charts, and maps each.

<3>  Float left instructs the browser to render each of these divs starting from the left and adding the next one to the right.

<4>	 The media query controlling layouts for devices with viewports with the max width of 768px starts here.

<5>  Split the width fifty-fifty between the HTML elements with ID's main-top-section and main-bottom-section. 

<6> Allocate main-top-section and main-bottom-section next to each other (`float: left`) as in <<FIG11-9>>. To better understand how the CSS `float` property works, visualize a book page having an small image on the left with the text floating on the right (a text wrap) - this is what `float: left` can do on a Web page. 

<7>  Turn the floating off so the charts, maps, and video containers will start one under another as in <<FIG11-9>>.

<8>	 The media query controlling layouts for devices with viewports with the max width of 640px starts here.

<9> Let the containers main-top-section, main-bottom-section take the entire width and be displayed one under another (no floating) as in <<FIG11-10>>.

TIP: Internet Explorer 8 and older don't natively support media queries. Consider using Modernizr to detect support of this feature, and load the https://github.com/h5bp/mobile-boilerplate/wiki/Media-Queries-Polyfill[Media Queries Polyfill], if needed. 	

.The Viewport Concept
*****************************

Mobile browsers use a concept of _viewport_, which is a virtual window where they render the Web page content. This virtual window can be wider than the actual width of the display of the user's mobile device. For example, by default iOS Safari and Opera Mobile render the page to the width of 980px, and then shrinks it down to the actual width (320px on old iPhones and 640px on iPhone 4 and 5). By using the meta tag `viewport` your Web page overrides this default and renders itself according to the actual device size.  All code samples in this chapter include the `viewport` meta tag in index.html. All mobile browsers support it even though it's not a part of the HTML standard yet.

[source, html]
---
<meta name="viewport" content="width=device-width, initial-scale=1.0">
---

This meta tag tels the browser that the width of the virtual viewport should be the same as the width of the display. It'll will work fine if your responsive design includes a version of the page layout optimized for the width of the user's device. But if you'd be rendering a page that's narrower than the default width of the display (e.g. 500 pixels) setting the attribute `content="width=500"` would allow the mobile Web browser to scale the page to occupy the entire display real estate. Setting the initial scaling to 1.0 ensures that the page will be rendered as close to the physical device size as possible. If you don't want to allow the user scale the Web page, add the attribute `user-scalable=no` to the meta tag `viewport`. 

WARNING: If you'll apply the initial scale to be 1.0, but to a Web page that was not build using responsive design principles, users will need to zoom or pan to see the entire page. 

For details about configuring the viewport refer to https://developer.apple.com/library/safari/#documentation/AppleApplications/Reference/SafariWebContent/UsingtheViewport/UsingtheViewport.html[Apple's] or http://dev.opera.com/articles/view/an-introduction-to-meta-viewport-and-viewport/[Opera's] documentation.

*****************************

Some of the important concepts to take away from this example are to switch from pixels to percentages when specifying width. In the next examples you'll see how to switch from using rigid `px` to more flexible `em` units. The CSS `float` property you can control relative (not absolute) positioning of your page components.  

How many media queries is too many? It all depends on the Web page you're designing. In the sample CSS shown in this section above we've used the breakpoint of 768px to represent the width of the tablet in the portrait mode, and this is fine for the iPad. But several tablets (e.g. 10.1" Samsung Galaxy) have 800px-wide viewport while Microsoft Surface Pro is 1080px wide. Don't try to create a pixel perfect layout using responsive design. Use common sense and remember, the more different media queries you provide the heavier your CSS file will become. But in mobile world you should try to create Web applications as slim as possible.     


=== Fluid Grids

Fluid grids is a very important technique in the responsive design. Grids were used by Web designers for ages - a web page was divided by a number of imaginary rows and columns. But the fluid grid, as the name implies, is flexible and can scale based on the screen sizes.

==== Moving Away From Absolute Sizing

When a browser displays text it uses its default font size unless it was overruled by the `font-size` property. Typically, the default font size is 16 pixels. But instead of using the absolute font size, you can use the relative one by using so called _em_ units. The default browser's font size can be represented by 1em. Since the font size happens to be 16px then 1em is 16 px. 

The absolute sizes are enemies of the responsive design Web sites, and specifying the sizes in em unit allows you to create Web pages with the pretty flexible and fluid content. The size can be calculated based on a formula offered by Ethan Markotte in his http://www.alistapart.com/articles/fluidgrids/[article on fluid grids]: `target/context=result`, which in case of fonts becomes `size-in-pixels/16 = size-in-em`. 

For example, instead of specifying the size as 24px, you can set it to 1.5em: 24/16. In your CSS file you can write something like `padding-bottom: 1.5em`. This may seem not a big deal, but it is, because if everything is done in relative sizing, your page will look good and proportional regardless of the screen size and regardless of how big or small 24px may look on a particular screen.

If we are talking about em units for representing font sizes, the font becomes _the context_, but what if you want to represent the width of an arbitrary HTML component in a browser's window or any other container? Then the width of your component becomes the `target` and the total width of the container becomes the `context`. We can still use the above formula, but will multiply the result by 100%. This way the width on an HTML component will be represented not in em, but in percentages relative to the total width of the container. 

For example, if the total width of the browser's window is 768px, and we want to create a 120px-wide panel on the left, instead of specifying this width in pixels we'll use the formula and turn it into percentages.We want to calculate the target's width in percents of the available context (100%): 

120 / 768 * 100% = 15.625% 

Such approach makes the page design _fluid_. If someone decides to open this page on a 480px-wide screen, the panel will still take 15.625% of the screen rather than demanding 120 pixels, which would look substantially wider on a smaller viewport.

==== Window as a Grid

While designing your page you can overlay you entire Web page real estate with imaginary grid with any number of columns. Make it flexible though - the width of each column has to be specified in percentages.

http://www.adobe.com/products/dreamweaver.html[Adobe Dreamweaver CS6] automates creation of media queries and it introduced Fluid Grid layout (see <<FIG11-11>>). It also allows you to quickly see how your design will look like on the tablet or phone (you can pick screen size too) with a click on the corresponding status bar button.

[[FIG11-11]]
.Creating a Fluid Grid Layout in Dreamweaver
image::images/fig_11_11.png[]

Web designers use different approaches in styling with fluid grids. When you design a new page with Dreamweaver's Fluid Grid Layout it suggest you to allocate different number of columns for desktop, tablet and mobile, for example, it's default offer is to allocate 10 columns for the desktops, 8 for the tablets, and 5 for phones, which is perfectly solid approach. But our experienced Web designer Jerry prefers using 12 columns for all screen sizes playing with the width percentages for different layouts.  


Now imagine that you'll overlay the entire window with an invisible grid containing twelve equally sized columns. In this case each column will occupy 8.333% of the total width. Now, if you'd need to allocate to some HTML `<div>` or other component about 40% of the total width, you could do this by allocating five grid columns (8.333% * 5 = 41.665%). Accordingly, your CSS file can contain 12 classes that you can use in your page:

[source, html]
----
.one-column {
	width: 8.333%;
}

.two-column {
	width: 16.666%;
}

.three-column {
	width: 24.999%;
}

.four-column {
	width: 33.332%;
}

.five-column {
	width: 41.665%;
}

.six-column {
	width: 49.998%;
}

.seven-column {
	width: 58.331%;
}

.eight-column {
	width: 66.664%;
}

.nine-column {
	width: 74.997%;
}

.ten-column {
	width: 83.33%;
}

.eleven-column {
	width: 91.663%;
}

.twelve-column {
	width: 100%;
	float: left;
}
----




 

