== Using AJAX and JSON

This chapter is about bringing the external data to HTML Web pages. In the previous chapters we've been using only hard-coded data - our goal was to see how to layout the Web page and how to change the layout in case some events have happened, e.g. the user clicked on the menu button. Now we'll make sure that our single-page application Save Sick Child can request the data from the external sources and send them the data too. This comes down to two questions:

1. How an HTML Web page can exchange the data with external data sources?
2. What format to use for presenting the application data?

While there could be different answers to these questions, we'll be using AJAX techniques as an answer to the first question and JSON data format as an answer to the second one. We'll start this chapter with explaining why AJAX and JSON are appropriate choice for the Save Sick Child Web application and many others.

=== Why AJAX

If a user points her Web browser to one URL and then changes it to another, the new request will be sent to the new URL, and the new page will arrive and will be rendered by the browser. The URL may have been changed not because the user decided to enter a new one, but simply because the user selected a menu item that resulted in bringing a new Web page to the Web browser. This was pretty much the only way Web sites were designed in the 90th. 

Back in 1999, Microsoft decided to create a Web version of Outlook - their popular eMail application. Their goal was to be able to modify the Input folder as the new emails arrive, but without refreshing the entire content of the Web page. They created an ActiveX control called `XMLHTTP` that lived inside Internet Explorer 5 and could make requests to the remote servers receiving data without the need to refresh the entire Web page. Such a Web Outlook client would would make periodic requests to the mail server, and if the new mail arrived the application would insert the new row on the top of the Inbox by direct change of the DOM object from JavaScript. 

In early 2000th, other Web browsers adopted this model and implemented their own versions of `XMLHTTPRequest`. Its Working Draft 6 is http://www.w3.org/TR/XMLHttpRequest/[published by W3C].  Google created their famous email client GMail and Map Web applications.  In 2005 Jesse James Garrett wrote an article titled "AJAX: A New Approach to Web Applications". The Web developer community liked the term AJAX, which stand for Asynchronous JavaScript and XML, and this gave a birth to the new breed of Web applications that could update the content of just the portion of a Web page without re-retrieving the entire page. Interestingly enough, the last letter in the AJAX acronym stands for XML, while realistically presenting the data in the XML form is not required, and is seldom used as a data format in the client-server exchanges. JSON is used a lot more often to represent the data, but apparently AJAJ didn't sound as good as AJAX. 

Visit the http://www.google.com/finance[Google Finance] or http://finance.yahoo.com/[Yahoo! Finance] Web pages when the stock market is open, and you'll see how the price quotes or other financial indicators  are changing while the most of the content remains the same. This gives an illusion of the server pushing the data to your Web client. But most likely, it not a data push but rather periodic _polling_ of the server's data using AJAX. In the modern Web applications we expect to see more of the real server side data push using HTML5 WebSockets API, which is described in details in Chapter 9 of this book. 


=== Why JSON

http://www.json.org/js.html[JSON] stands for JavaScript Object Notation. It's a more compact than XML way to represent the data. Besides, all modern Web Browsers understand and can parse JSON data. After learning the JavaScript object literals in Chapter 2, you'll see that the presenting the data in JSON notation is almost the same as writing JavaScript object literals. 


<<FIG4-1>> depicts a high level view of a typical Web application. All of the code samples from Chapter 2 and Chapter 3 were where written in HTML, JavaScript and CSS. in this chapter will add to the mix the `XMLHttpRequest` object that will send and receive the JSON content wrapped into `HTTPRequest` and `HTTPResponse` objects.


[[FIG4-1]]
.Anatomy of a Web application
image::images/fig_04_01.png[]

Back in the 90th, if a Web application would need some JavaScript code or data from the server, Web developers would wrap it into an HTML `<iFrame>` element and send it to the client, which would use the the https://developer.mozilla.org/en-US/docs/JavaScript/Reference/Global_Objects/eval[`eval()`] function to execute it. Today, there is no need to do this if you just want to send the data - format it as a JSON object and use the JSON parser. 

When a Web page is loaded the user doesn't know (and doesn't have to know) that the page content was brought from several servers that can be located thousands miles apart. More often than not, when the user enters the URL requesting an HTML document, the server side code can engage several servers to bring all the data requested by the user. Some of the data are retrieved by making calls to one or more Web Services. The legacy Web services were build using SOAP + XML, but  majority of today's Web services are build using lighter _RESTful architecture_, which is outside of the scope of this book, but we'll just say that JSON became a de facto standard data exchange format of the REST Web services. 


=== How AJAX Works

Imagine a single-page application that needs some data to refreshed in real time. For example, our Save Sick Child application includes an online auction where people can bid and purchase some goods as a part of a charity event. If John from New York placed a bid on certain auction item, and some time later Mary from Chicago placed the higher bid on the same item, we want to make sure that John knows about it immediately, in real time.  This means that the server-side software that received Mary's bid has to push this data to all users who expressed their interest in the same item. 

But the server has to send and the browser has to modify only the new price while the rest of the content of the Web page should remain the same. You can implement behavior using AJAX. But first, the bad news:
you can't implement the real-time server side push with AJAX. You can only emulate this behavior by using polling techniques, when the `XMLHttpRequest` object sits inside your JavaScript code and periodically sends HTTP requests to the server asking if there were any changes in bids since the last request. 

If, for instance, the last request was made at 10:20:00AM, the new bid was placed at 10:20:02AM, and the application makes a new request (and updates the browser's window) at 10:20:25AM, this means that the user will be notified about the price change with a three second delay. AJAX is still request-response based way of getting the server's data, and strictly speaking, doesn't offer a real real-time updates. Some people use the term _near real time_ notifications.

Another bad news is that AJAX uses HTTP protocol for the data communication, which means that a substantial overhead in the form of `HTTPResponse` header will be added to the new price, and it can be as large as several hundred bytes. This is still better than sending the entire page to the Web browser, but HTTP adds a hefty overhead. 

****

NOTE: We'll implement such an auction in Chapter 9 using a lot more efficient protocol called WebSockets, which supports a real-time data push and adds only several extra bytes to the data load. 

****

==== Retrieving Data From the Server

Let's try to implement AJAX techniques by implementing a data retrieval. The process of making an AJAX request is well defined and consists of the following steps:


* Create an instance of XMLHttpRequest object.

* Initialize the request to your data source by invoking the method `open()`.

*  Assign the a handler to the `onreadystatechange` attribute to process server's response.

*  Make a request to the data source by calling `send()`. 

*  In your handler function process the response when it arrives from the server.

*  Modify the DOM elements based on the received data, if need be.


In most of the books on AJAX you'll see browser-specific ways of instantiating the `XMLHttpRequest` object (a.k.a. XHR). Most likely you'll be developing your application using some JavaScript framework and all browser specifics in instantiating of the `XMLHttpRequest` will be hidden from you. Chapters 6 and 7 include such examples, but let's stick to the standard JavaScript way implemented by all modern browsers: 

`var xhr = new XMLHttpRequest();`

The next step is to initialize a request by invoking the method `open()`. You need to provide the HTTP method (`GET`, `POST` et al.), the URL of the data source. Optionally, you can provide three more arguments: a Boolean variable indicating if you want this request to be processed asynchronously (which is the default), and the user id and password if the authentication is required. Keep in mind, that the following method does not request the data yet.

`xhr.open('GET', dataUrl);`

TIP: Always use HTTPS ptotocol if you need to send the user id and password. Using secure HTTP should be your preferred protocol in general (read more in Chapter 10).

XHR has an attribute `readyState`, and as soon as it changes the callback function assigned to the `onreadystatechange` will be invoked. This callback should contain your application specific code to analyze the response and process it accordingly. Assigning such a callback is pretty simple:

`xhr.onreadystatechange = function(){...}`

Inside such a callback function you'll be analyzing the value of the XHR's attribute `readyState`, which can have one of the following values:

.States of the Request
[width="80%",options="header"]
|=============================================
|Value | State | Description

|0 |UNSENT | the XHR has been constructed
|1 |OPENED | open() was successfully invoked
|2 |HEADERS_RECEIVED| All HTTP headers has been received
|3 |LOADING | The response body is being received
|4 |DONE | the data transfer has been completed

|=============================================

Finally, send the AJAX request for data. The method `send()` can be called with or without parameters depending on if you need to send the data to the server or not. In its simplest fore the method `send()` can be invoked as follows:

` xhr.send();`

The complete cycle of the `readyState` transitions is depicted in <<FIG4-2>>

[[FIG4-2]]
.Transitions of the readyState attribute
image::images/fig_04_02.png[]

Let's spend a bit more time discussing the completion of the this cycle when server's response is received and the XHR's `readyState` is equal to 4. This means that we've got something back, which can be either the data we've expected or the error message. We need to handle both scenarios in the function assigned to the `onreadystatechange` attribute. This is a common way to do it in JavaScript without using frameworks:

[source, javascript]
----
xhr.onreadystatechange = function(){

 if (xhr.readyState == 4) {

   if((xhr.status >=200 && xhr.status <300) || xhr.status===304) {

       // We got the data. Get the value from one of the response attributes
       // e.g. xhr.responseText and process the data accordingly.

   } else {
      // We got an error. Process the error code and 
      // display the content of the statusText attribute.
   } 

  }     
};
----

First the code should check the http://www.w3.org/Protocols/rfc2616/rfc2616-sec10.html[HTTP status code] received from server. W3C splits the HTTP codes into groups. The codes numbered as 1xx are informational, 2xx are successful codes, 3xx are about redirections, 4xx represent bad requests (like infamous 404 for Not Found), and 5xx for server errors. That's why the above code fragment checks for all 2xx codes and 304 - the data was not modified and taken from cache. 

To see the first example where we are using AJAX in our Save Sick Child application run the Aptana's project-04-1-donation-ajax-html, where we've removed the countries and states from HTML and saved them in two separate files: data/us-states.html and data/countries.html. The user's of Save Sick Child page  won't find any visual differences, but the Countries and States dropdowns are now populated be the data located in these files. Later in this chapter in the section on JSON we'll replace this HTML file with its JSON version. These are the first three lines (out of 241) from the file countries.html:

[source, html]
----
<option value="United States">United States</option>
<option value="United Kingdom">United Kingdom</option>
<option value="Afghanistan">Afghanistan</option>
----

The JavaScript code that reads countries and states from file and populates the dropdowns comes next. The content of these files is assigned to the `innerHTML` attribute of the given HTML `<select>` element. 

[source, javascript]
----
function loadData(dataUrl, target) {
  var xhr = new XMLHttpRequest();
  xhr.open('GET', dataUrl, true);		
  xhr.onreadystatechange = function() {
  	if (xhr.readyState == 4) {
           if((xhr.status >=200 && xhr.status <300) || 
                                 xhr.status===304){

  			target.innerHTML += xhr.responseText;
  	  } else {

  			console.log(xhr.statusText);
  	  }
  	}
  }
  xhr.send();
}

// Load the countries and states using XHR
loadData('data/us-states.html', statesList);
loadData('data/countries.html', counriesList);
----

****

NOTE: The above code has an issue, which may not be so obvious, but can irritate users. The problem is that it doesn't handle errors. Yes, we print the error message on the developer's console, but the end user will never see them. If for some reason the data about countries or states won't arrive, the dropdowns will be empty, the donation form won't be valid and the users will become angry that they can't make a donation without knowing why. Proper error handling and reports are very important for any application so never ignore it. You should display a user-friendly error messages on the Web page. For example the above `else` statement can display the received message in the page footer

else {
	console.log(xhr.statusText);
	
	// Show the error message on the Web page
      footerContainer.innerHTML += '<p class="error">Error getting ' + 
                    target.name + ": "+ xhr.statusText + ",code: "+
                     xhr.status + "</p>";
}

This code uses the CSS selector `error` that will show the error message on the red background. you can find it in the file styles.css in Aptana's project-04-3-donation-error-ajax-html. It looks like this:

[source, css]
----
footer p.error {
	background:#d53630;
	text-align:left;
	padding: 0.9em;
	color: #fff;
}
----

****



The following code fragment shows how to add the received data to a certain area on the Web page.        
This code creates an HTML paragraph `<p>` with the text returned by the server and then adds this paragraph to the `<div>` with the ID `main`:

[source, javascript]
----
if (xhr.readyState == 4) {
  if((xhr.status >=200 && xhr.status <300) || xhr.status===304){
      var p = document.createElement("p");

      p.appendChild(document.createTextNode(myRequest.responseText));
      
      document.getElementById("main").appendChild(p);
  }
}    
----

==== Sending Data to the Server 

The next example to consider is when the Web client sends the data to the server using XMLHttpRequest object. The user of Save Sick Child fills out the Donate form and presses the button Donate. 


==== AJAX: Good and Bad 

AJAX techniques have their pros and cons. You saw how easy it was to create a Web page that didn't have to refresh itself, but provided the users with the means of communicating with the server. This certainly improves the user experience. The fact that AJAX allows you to lower the amount of data that goes over the wire is important too. Another important advantage of AJAX that it works in a standard HTML/JavaScript environment and is supported by all Web browsers. The JavaScript frameworks hides all the differences in instantiating `XMLHttpRequest` and simplify making HTTP requests and processing responses. Since the entire page is not reloaded, you can create "fat clients" that keep certain data preloaded once and reused in your JavaScript in different use cases. With AJAX you can lazy load some content as needed rather than loading everything at once. Taken for granted auto-completion feature would not be possible in HTML/JavaScript application without the AJAX.

On the bad side, with AJAX the user loses the functionality of the browser's Back button, which reloads the previous Web page while the user could expect to see the previous state of the same page. Since the AJAX brings most of the content dynamically, the search engines wouldn't rank your Web pages as high as it would do if the content was statically embedded in the HTML. Increasing the amount of AJAX interactions means that your application will have to send more of the JavaScript code to the Web browser, which increases the complexity of programming and decreases the scalability of your application. 


=== Using JSON 

When an application has a client and server tiers one of the important decision to be made is about the format of the data that go over the network. We are talking about the application-specific data. Someone has to decide how to represent the data about an Auction Item, Customer, Donation et al. The easiest way to represent text data is Comma Separated Format (CSV), but it's not easily readable by humans, hard to validate,  and recreation of JavaScript objects from CSV feed would require additional information about the headers of the data. 

Sending the data in XML form addresses the readability and validation issues, but it's very verbose. Every data element has to be surrounded by an opening and closing tag describing the data. Converting the XML data to/from JavaScript object requires special parsers, and you'd need to use one of the JavaScript libraries for cross-browser compatibility.

In today's Web, JSON became the most popular data format. It's not as verbose as XML, and JSON's notation is almost the same as JavaScript object literals. It's easily readable by humans, and every ECMAScript 5 compliant browser includes a native JSON object: `window.JSON`. Even though the JSON formatted data look like JavaScript object literals, JSON is language independent. Here's an example of the data in the JSON format:

[source, javascript]
----
{
 "fname":"Alex",
 "lname":"Smith",
 "age":30,
 "address": {
     "street":"123 Main St.",
     "city": "New York"}
}
----

Anyone who knows JavaScript understands that this is an object that represents a person, which has a nested object that represents an address. Note the difference with JavaScript literals: the names of the properties are always strings, and every string must be taken into quotes. Representing the same object in XML would need a lot more characters (e.g. `<fname>Alex</fname>` etc). 

There are some other important differences between JSON and XML. The structure of the XML document can be defined using DTD or XML Schema, which simplifies the data validation, but requires additional programming and schema maintenance. On the other hand, JSON data have data types, for example the age attribute in the above example is not only a `Number`, but will be further evaluated by the JavaScript engine and will be stored as an integer. JSON also supports arrays while XML doesn't. 

For parsing JSON in JavaScript you use the method `JSON.parse()`, which takes a string and returns JavaScript object, for example:

[source, javascript]
----
var customer=JSON.parse('{"fname":"Alex","lname":"Smith"}'); 

console.log(“Your name is ” + customer.fname + “ “ + customer.lname);

----

For a reverse operation - turning an object into JSON string - do `JSON.stringify(custormer)`. The older browsers didn't have the `JSON` object, and there is an alternative way of parsing JSON is with the help of the script json2.js, which creates the JSON property on the global object. The json2.js is freely available on http://bit.ly/aUMLnL[Github]. In Chapter 3 you've learned about feature detection with Modernizr, and you can automate the loading of this script if needed. 

[source, javascript]
----
Modernizr.load({
    test: window.JSON,
    nope: 'json2.js',
    complete: function () {
        var customer = JSON.parse('{"fname":"Alex","lname":"Smith"}');
    }
});
----


Usually, JSON-related articles and blogs are quick to remind you about the evil nature of the JavaScript function `eval()` that can take an arbitrary JavaScript code and execute it. The `JSON.parse()` is pictured as a protection against the malicious JavaScript that can be injected into your appplication's code and then executed by `eval()` by the Web browser. The main argument is that `JSON.parse()` will not be processing the incoming code unless it contains valid JSON data.

Protecting your application’s code from being infected by means of `eval()` can and should be done outside of your application code. Replace HTTP with secure HTTPS protocol and eliminate the possibility of cross-origin scripting by routing all requests to third-party data sources via proxying such requests through your trusted servers.

Running Aptana's project project-04-2-donation-ajax-json reads the countries and states from the files countries.json and us_states.json respectively. The beginning of the file countries.json is shown below:

[source, javascript]
----
{
"countrieslist": [
	{
		"name": "Afghanistan",
		"code": "AF"
	}, {
		"name": "Åland Islands",
		"code": "AX"
	}, {
		"name": "Albania",
		"code": "AL"
	}, 
----


To make sure that your JSON data is properly formatted validate it using http://jsonlint.com/[JSONLint]. If you paste an ugly one-line JSON data JSLint will reformat it into a readable form. 

JSON supports arrays, and the next example shows you how the information about a customer can be presented in JSON format. A customer can have more than one phone, which are stored in an array. 

[source, javascript]
----
<script >
   var customerJson = '{"fname":"Alex",
                        "lname":"Smith", 
                        "phones":[
                            "212-555-1212", 
                            "565-493-0909"
                        ]
                       }';
                           
   var customer=JSON.parse(customerJson);

   console.log("Parsed customer data: fname=" + customer.fname + 
                      " lname=" + customer.lname +
                      " home phone=" + customer.phones[0] + 
                      " cell phone=" + customer.phones[1]); 
</script>        
----

The code above creates an instance of the JavaScript object referenced by the variable `customer`. In this example the `phones` array just holds two strings. But you can store object in JSON array the same way as you'd do it in JavaScript object literal - just don't forget to put every property name in quotes. 

[source, javascript]
----
var customerJson = '{"fname":"Alex",
                     "lname":"Smith",
                   "phones":[
                        {"type":"home", "number":"212-555-1212"},
                         {"type":"work","number":"565-493-0909"}]
                    }';
----



=== Loading Charity Events using AJAX and JSON

The last example in Chapter 3 was about displaying various charity events on the Google map using multiple markers. But the data about these events were hard-coded in HTML file. After getting familiar with AJAX and JSON it should not be too difficult to create a separate file with the information about charities in JSON format and load them using `XMLHTTPRequest` object.

The next version of Save Sick Child is a modified version of the application that displayed Google map with multiple markers from Chapter 3. But this time we'll load the information about the charity events from the file campaigndata.json shown next.

[source, javascript]
----
{
  "campaigns": {
    "header": "Nationwide Charity Events",
    "timestamp":"12/15/2012",
    "items": [
      {
        "title": "Lawyers for Children",
        "description":"Lawyers offering free services for sick children",
        "location":"New York,NY"
      },
      {
        "title": "Mothers of Asthmatics",
        "description":"Mothers of Asthmatics - nationwide Asthma network",
        "location": "Dallas,TX"
      },
      {
        "title": "Friends of Blind Kids",
        "description":"Semi-annual charity events for blind kids",
        "location":"Miami,FL"
      },
      {
        "title": "A Place Called Home",
        "description":"Adoption of sick children",
        "location":"Miami,FL"
      },
      {
        "title": "Marathon for Survivors",
        "description":"Annual marathon for cancer survivors",
        "location":"Fargo, ND"
      }
    ]
  }
}
----

Run the Aptana's project-11-maps-json-data and you'll see the map with the markers for each of the events loaded from the file campaigndata.json (see <<FIG4-03>>). Click on the marker to see an overlay with the event details. 

[[FIG4-3]]
.Markers built from JSON data
image::images/fig_04_03.png[]

Note that this JSON file contains the object `campaigns` which includes the array of objects `items` representing charity events. `XMLHttpRequest` object loads the data and the `JSON` parses it assigning the `campaigns` object to the variable `campaignsData` that is used in showCampaignsInfo() with Google Maps API (we've omitted the mapping part for brevity). 

[source, javascript]
----
function showCampaignsInfo(campaigns) {

	campaignsCount = campaigns.items.length;

	var message = "<h3>" + campaigns.header + "</h3>" + 
	                      "On " + campaigns.timestamp + 
	                " we run " + campaignsCount + " campaigns.";
	
    locationUI.innerHTML = message + locationUI.innerHTML;
	resizeMapLink.style.visibility = "visible";

	createCampaignsMap(campaigns);
}

function loadData(dataUrl) {
 var xhr = new XMLHttpRequest();
 xhr.open('GET', dataUrl);

 xhr.onreadystatechange = function() {
 	if (xhr.readyState == 4) {
          if ((xhr.status >= 200 && xhr.status < 300) || 
                                    xhr.status === 304) {
 	 	var jsonData = xhr.responseText;

 	 	var campaignsData = JSON.parse(jsonData).campaigns;
 	 	showCampaignsInfo(campaignsData);
 	 } else {
 	 	console.log(xhr.statusText);
 	 							
           tempContainer.innerHTML += '<p class="error">Error getting ' + 
                 target.name + ": "+ xhr.statusText + 
                 ",code: "+ xhr.status + "</p>";
 	 }
 	}
 }
 xhr.send();
}

var dataUrl = 'data/campaignsdata.json';
loadData(dataUrl);
----

TIP: Some older Web browsers may bring up a File Download popup window when the content type of the server's response is set to "application/json". Try to use the MIME type "text/html" instead, if you ran into this issue. 

Large-scale Web applications could be integrated with some content management systems (CMS), which can be supplying content such as charity events, sales promotions, et al.  CMS servers can be introduced into the architecture of a Web application to separate the work on preparing the content from the application delivering it as shown in <<FIG4-4>> depicting a diagram of a with a Web application integrated with the CMS server. 

[[FIG4-4]]
.CMS in the picture 
image::images/fig_04_04.png[]

The content contributors and editors prepare the information on the charities and donation campaigns using a separate application, not the Save Sick Child page. The CMS server and the Web application server www.savesickchild.org may be located in the same or separate data centers. The server-side code of the Save Sick Child is making a call to a CMS server whenever the site visitor is requesting the information about charity events. If you get to pick a CMS for your future Web application make sure it offers data feed in JSON format. 

Some time ago one of the authors of this book was helping Mercedes Benz USA in development of their consumer facing Web application where people could search, review and configure their next car. <<FIG4-5>> shows a snapshot taken from the mbusa.com. Three rectangular areas at the bottom were created by the Web designers to display today's deals and promotions. The up-to-date content for these areas was retrieved from a CMS server when the user visited mbusa.com. 

[[FIG4-5]]
.Current Mercedes deals from CMS 
image::images/fig_04_05.png[]


=== JSON in Java

If a Web browser receives JSON stream from the server the application needs to turn it into JavaScript objects. If a Web client needs to send the JavaScriot objects to the server they can be converted into JSON string. Similar tasks have to be performed on the server side. Our Save Sick Child application uses Java application server. There is a number of third-party Java libraries that can consume and generate JSON content. 

There are several Java libraries to convert Java objects into their JSON representation and back, for example http://code.google.com/p/google-gson/[Google’s Gson], http://jackson.codehaus.org/[Jackson], http://code.google.com/p/json-simple/[json-simple]. 

Google's Gson is probably the simplest one for use. It provides methods `toJson()` and `fromJson()` to convert Java objects to JSON and back. Gson allows pre-existing un-modifiable objects to be converted to and from JSON and Supports Java Generics. Gson works well with complex objects with deep inheritance hierarchies. 

Let's say JavaScript sends to Java the following JSON string: 

`{"fname": "Alex", "lname":"Smith","skillLevel": 11}`

The Java code can turn it into an instance of the Customer object by calling the method `Gson.fromJson()`. Similarly, Java code can create a JSON string from an object instance. Both of these operations are illustrated below. 

[source, javascript]
----
public Customer createCustomerFromJson(String jsonString){

    Gson myGson = new Gson();
    Customer cust = myGson.fromJson(jsonString, Customer.class);
    return cust;
}

public String createJsonFromCustomer(Customer cust){
	
	Gson gson = new Gson();

	return gson.toJson(cust, Customer.class);
}
----

Of course, the declaration of the Java class `Customer` must exist in the in the classpath and don't forget to include gson.jar to your Java project.

TIP: JSON data format is often used in non-JavaScript applications. For example, a Java server can exchange the JSON-formatted data with a .Net server.

****

NOTE: The upcoming Java EE 7 specification includes JSR 353, which defines a standardized way for parsing and generating JSON. JSR 353 defines the Java API from JSON Processing (JSON-P), which shouldn't be confused with another acronym http://json-p.org/[JSON-P], which is JSON with Padding.

****


=== Compressing JSON

JSON format is more compact than XML and is readable by the human beings. But when you are ready to deploy your application in production, you still want to compress the data so less bytes will travel over the wire to the user's browser. The server-side libraries that generate JSON will make the data sent to the client compact by removing the tab and the new line characters. 

If you want to turn the pretty-print JSON into a more compact one-line format just use such Web sites as http://javascriptcompressor.com/[JavaScript Compressor] or http://www.freeformatter.com/json-formatter.html/[JSON Formatter]. For example, after running the 12Kb file countries.json through this compressor, its size was decreased to 9Kb. JSONLint can also compress JSON if you provide this URL: http://jsonlint.com?reformat=compress.

Similarly to most of the content that is being sent to browsers by the Web servers, the JSON data should be compressed. http://en.wikipedia.org/wiki/Gzip[GZip] and http://en.wikipedia.org/wiki/DEFLATE[Deflate] are the two main compression methods used in today's Web. Both use the same compression algorithm _deflate_, but while with Deflate the compressed data are being streamed to the client, the GZip first compresses the entire file, calculates the size and adds some additional headers to the compressed data. So GZip may need some extra time and memory, but you are more protected from getting incomplete JSON, JavaScript or other content. Both Gzip and Deflate are easily configurable by major Web servers, but it's hard to say which one is better for your application - set up some tests with each of them and decide which one works faster or take less system resources, but don't compromise on reliability of the compressed content. 

We prefer using GZip, which stands for GNU zip compression. On the server side you'd need to configure the gzip filters on your Web server. You need to refer to your Web server's documentation to find out how to configure gzipping, which is done by the MIME type. For example, you can request to gzip everything except images (you might want to do this if you're not sure if all browsers can properly uncompress certain MIME types). 

For example, applying the GZip filter to the 9Kb countries.json will reduce its size to 3Kb, which means serious bandwidth savings especially in the Web applications with lots of concurrent users. This is even more important for the mobile Web clients, which may be operating in the areas with slower connections. The Web clients can set the HTTP request attribute `Accept-Encoding: gzip` inviting the server to return gzipped content, and the Web server may compress the response if it does support it or unzipped content otherwise. If the server supports gzip, the HTTP response will have the attribute `Content-Encoding: gzip`, and the browser will know to unzip the response data before use. 

Gzip is being used for compressing all types of content: HTML, CSS, JavaScript and more. If your server sends JSON content to the client setting the content type to `application/json` don't forget to include this MIME type in your server configuration for Gzip. 

Web browsers support the gzipping too, and your application can set `Content-Ecoding: gzip` in HTTP request while sending the data from the Web client to the server. But Web clients usually don't send massive amounts of data to the server so the benefits of the compression on the client side may not be as big.

=== Adding Charts to Save Sick Child

Let's consider yet another use case for JSON in Save Sick Child. We want to display charts with statistics about the donations.  

As per W3C, a http://www.w3.org/wiki/HTML/Elements/canvas[`<canvas>`] element provides scripts with a resolution-dependent bitmap canvas, which can be used for rendering graphs, game graphics, or other visual images on the fly.


=== Summary

In this chapter you've learned about using AJAX as a means of communications of your Web browser with the servers. AJAX also deserves a credit for making the JavaScript language popular again by showing a practical way of creating single-page Web applications. Over the years JSON became the standard way of presenting data on the Web. The current version of the Save Sick Child application cleanly separates the code from the data, and you know how to update the content of the Web page without the need to re-retrieve the entire page from the server. In the next chapter you'll get familiar with the test-driven way of developing Web applications with JavaScript.