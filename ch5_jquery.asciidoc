== Save Sick Child with JQuery 

Up till now we've been using HTML, JavaScript and CSS to create the Save Sick Child Web application.  In this chapter we'll introduce a more productive way of developing for the Web by using the framework called jQuery.  There are dozens of JavaScript libraries, but in this book we'll use just the two of them: jQuery and Ext JS. Their mobile counterparts are called jQuery Mobile and Sencha Touch. 

http://jquery.com/[jQuery] is probably the most popular JavaScript library. It's simple to use and doesn't require you to dramatically change the way you program for the Web. jQuery offers you a helping hand with the tasks that most of the Web developers need to deal with, for example, finding DOM elements, processing browser's events, dealing with browser incompatibility et al. Since jQuery is an extensible framework, lots and lots of plugins were created by developers from around the world, and all of them are available for free. If you can't find the plugin that fits your need - create one yourself.

Besides jQuery and jQuery Mobile there is a http://jqueryui.com/[jQuery UI library], which is a set of user interface interactions, effects, widgets, and themes built on top of the jQuery. You can find in jQuery UI such widgets as Datepicker, Accordion, Slider, Tabs, Autocomplete and more. jQuery UI will also help you with adding to your Web page various interactions (e.g. drag and drop)  and effects (e.g. adding CSS classes or animations). jQuery UI is built on top of jQuery core library and can't be used independently. 

In this chapter we'll cover the basics of jQuery and then re-write the Save Sick Child application using JQuery.

=== jQuery Primer


At the time of this writing the current version of jQuery is 1.9. You can download one of two distributions of jQuery framework. The gzipped minified version of jQuery weighs 33Kb (it's 93Kb if unzipped), and this is all you need unless you are planning to develop jQuery plugins, in which case get a larger development version - it's about 270Kb. We've downloaded it from jquery.com and included it in the `<script>` tag in our HTML code samples so you can run them even if the Internet connection is not available. 

But instead of deploying jQuery framework on your servers as a part of your application, you should use a common Content Delivery Network (CDN) URL in your HTML as shown below. Since jQuery is an extremely popular library, many Web sites use it. If more than one Web page would get it from the same CDN, the Web browser would cache it locally and reuse it rather than downloading a separate copy from different servers for every Web application that uses jQuery. The http://jquery.com/download/[Download page of jquery.com] offers three CDN: Google, Microsoft, and MediaTemple. For example, if you don't need to use HTTPS protocol with your application the MediaTemple's CDN suffice:

[source, html]
----
<script src="http://code.jquery.com/jquery-1.9.0.min.js"></script>
----

After covering JQuery basics, we are going to continue demonstrating a series of Aptana projects gradually increasing their complexity. The goal of this chapter is to re-write the Save Sick Child application using jQuery. We won't add any new functionality to this application - we want to show that the developers can be more productive in achieving the same result.

Some people will say that anyone who knows HTML can learn jQuery, but this is not so. Understanding of JavaScript is required. If you've read and understood the content from Chapter 2 - you're ready to learn jQuery.  The jQuery programming starts with with invoking the jQuery constructor named `jQuery()`. But people are using the shorter version of this constructor that's represented by a $ sign: `$()`. This `$` property is the only object that jQuery will create in the global namespace. Everything else will be encapsulated inside the `$` object.  

As you remember, JavaScript functions do not require you to invoke them with exactly the same number of parameters as they were declared with. Hence, when you invoke jQuery constructor you can pass different things to it. You can pass a String as an argument or another function, and jQuery constructor will invoke different code based on the argument type. For example, if you'll pass it a String, jQuery will assume that it's a CSS selector, and the caller wants to find element(s) in the DOM that match this selector. Basically, you may think of it this way - whenever you want jQuery do something for you, invoke `$()` passing it your request.

You'll need to get used to yet another feature of jQuery - function chaining. Each function returns an object, and you don't have to declare a variable to hold this object. You can just write something like `funcA().funcB();` This means that the function `funcB()` will be called as a method on the object, returned by the `funcA()`. 

==== Hello World


Let's start using jQuery rather then talking about it. The "Hello World" program is always a good start. 

[source, html]
----
<!DOCTYPE html>
<html lang="en">
	<head>
		<meta charset="utf-8">
		
		<title>Hello jQuery</title>		
	</head>
	<body>
		<script src="js/libs/jquery-1.9.0.min.js"></script>
		<script>
			$(function(){                                      // <1>
				$("body").append("<h1>Hello World!</h1>");     // <2>
				
			});	
		</script>
	</body>
</html>


----

<1> If the script passes a function to jQuery, it's getting invoked when the DOM object is ready - the `document.ready` event is dispatched. Keep in mind that it's not the same as invoking a function handler `window.onload`, which is called after all windows resources (not just the DOM object) are completely  loaded. 

<2> If the script passes a String to jQuery, it assumes that it's a CSS selector and finds the appropriate collection of HTML elements (it'll return the reference to just one `<body>` in this case).

Finding HTML elements based on the CSS selectors is very easy and you can specify one or more selectors in the same query. For example:

[source, javascript]
----

$(".donate-button"); // find the elements with the class donate-button

$("#login-link")  // find the elements with id=login-link

// find elements with id=map-container and id=video-container 
$("#map-container #video-container");  
----

==== jQuery Events


==== AJAX with jQuery


=== Working on Save Sick Child 

