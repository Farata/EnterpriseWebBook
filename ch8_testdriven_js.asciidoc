== Test-Driven Development with JavaScript

[quote, @bphogan, http://twitter.com/bphogan/status/194856922208407552]

To shorten the development cycle of your Web application you need to start testing it on the early stages of the project. It seems obvious, but many enterprise IT organizations haven't adopted the agile testing methodologies, which costs them dearly. JavaScript is dynamically typed interpreted language, which means that there is no compiler to help to identifying errors as it's done in compiled languages like Java. This means that for JavaScript Web applications a lot more time should be allocated for testing.

To switch to a test-driven development, start with accepting the notion of embedding testing into your development process rather than scheduling testing after the development cycle is complete. 

In this chapter we'll give you a brief overview of selected test frameworks for JavaScript: http://qunitjs.com/[Qunit] and http://pivotal.github.com/jasmine/[Jasmine]. We will cover the basic testing techniques such as "Test-driver development" and "Test First". You'll learn how to automate the testing process in multiple browsers with http://vojtajina.github.com/testacular/[Testacular] or by running tests in so called _headless_ mode with http://phantomjs.org/[PhantomJS]. You'll learn how to mock and stub selected artifacts of the environment (such as `XMLHTTPRequiest` object or timer) with http://sinonjs.org/[Sinon.js] and how to unit test the DOM manipulation code.

The second part of this chapter is dedicated to setting up a new Save Sick Child project in the IDE
with selected test frameworks.

=== Testing Basics ===

The basic types of testing are:

- Unit
- Integration
- Functional
- Load

The sections that follow examine the differences between these testing strategies and list the tools that will help you in automation of the testing process.

==== Unit Testing 

TBD

==== Integration Testing

TBD

==== Functional Testing 

TBD

==== Load Testing 

TBD

=== Save Sick Chiled With TDD

TBD