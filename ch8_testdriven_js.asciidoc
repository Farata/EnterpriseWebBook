== Test-Driven Development with JavaScript

[quote, @bphogan, http://twitter.com/bphogan/status/194856922208407552]

To shorten the development cycle of your Web application you need to start testing it on the early stages of the project. It seems obvious, but many enterprise IT organizations haven't adopted the agile testing methodologies, which costs them dearly. JavaScript is dynamically typed interpreted language, which means that there is no compiler to help to identifying errors as it's done in compiled languages like Java. This means that for JavaScript Web applications a lot more time should be allocated for testing.

To switch to a test-driven development, start with accepting the notion of embedding testing into your development process rather than scheduling testing after the development cycle is complete. 

In this chapter we'll give you a brief overview of selected test frameworks for JavaScript: http://qunitjs.com/[Qunit] and http://pivotal.github.com/jasmine/[Jasmine]. We will cover the basic testing techniques such as "Test-driver development" and "Test First". You'll learn how to automate the testing process in multiple browsers with http://vojtajina.github.com/testacular/[Testacular] or by running tests in so called _headless_ mode with http://phantomjs.org/[PhantomJS]. You'll learn how to mock and stub selected artifacts of the environment (such as `XMLHTTPRequiest` object or timer) with http://sinonjs.org/[Sinon.js] and how to unit test the DOM manipulation code.

The second part of this chapter is dedicated to setting up a new Save Sick Child project in the IDE with selected test frameworks.

=== Why to test ?

Software has bugs. We want to minimize its numbers and make changes to be safe.

=== Testing Basics 

The basic types of testing are:

- Unit
- Integration
- Functional
- Load

The sections that follow examine the differences between these testing strategies and list the tools that will help you in automation of the testing process.

==== Unit Testing 

Unit testing is performed by a developer and is targeted at small pieces of code to ensure, for example, that if you call a function with particular arguments, it will return the expected result.
TBD

==== Integration Testing

Integration testing is a process in which a developer combines several unit tests to ensure that they work properly with each other. 
Both unit and integration tests have to be written by application developers.
TBD

==== Functional Testing 

Functional testing (or acceptance testing) is aimed at finding out whether the application properly implements business logic. For example, if the user clicks on a row in the customer data grid, the program should display a form view with specific details about the selected customer. In functional testing business users should define what has to be tested, unlike unit or integration testing where tests are created by software developers.
Functional tests can be performed manually, in which a real person clicks through each and every view of the web application, confirming that it operates properly or reporting discrepancies with the functional specifications.
TBD

==== Load Testing 

Load testing is a process that can help answer to following questions: 
How many concurrent users can work with your application? But without bringing your server to its knees? Even if the server is capable of serving a thousand users, will performance suffer? If yes, how bad is it going to be?
TBD

==== Test Driven Development

- Test First
- Red-Green-Refactoring
- "Automate Everything!

TBD

=== Save Sick Children With TDD

TBD