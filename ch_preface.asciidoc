[preface]
== Preface

Ten years ago technical books were a lot fatter. A typical book on computer programming was at least a thousand pages long.  If the author(s) wanted to cover a set of related technologies (e.g. J2EE or .Net) the book could span 1500 pages or more. People were accustomed to reading books because Google, Stack Overflow, Youtube and Vimeo were not invented yet.  Today, majority of software developers prefer  googgling trying to find a code snippet to copy-paste into their program, and the smaller part of the programmers watches video recordings from conferences. 
We're not sure who started this _Get Slim_ movement, but some technical books have only 60 pages. By today's standards this 700-page book is fat. How many pages in this book have the information that's useful FOR YOU? The goal of this preface is to help you in making the educated decision: to buy or not to buy.

=== Who This Book is For

Web application development with HTML5 includes HTML, JavaScript, CSS and dozens of JavaScript frameworks. The main goal of this book is to give you a hands-on overview of development Web applications that can be run on a variety devices - desktops, tablets and smartphones.

This book is intended for software developers, team leaders, and Web application architects who want to learn the following:

* How to program in JavaScript language 
* How to write Web applications using some of the popular libraries and frameworks     
* How to modularize the client's side of Web applications written in JavaScript
* How to test Web applications
* Is applying _responsive design_ principles the right strategy for your application
* Which security vulnerabilities to watch for
* Why developing for mobile devices differs from developing for desktops 
* What are the pros and cons of developing mobile application using HTML5 stack versus native languages 

 
=== What the Book is And Why it's Important

This book has a lot of breadth, but for mastering some of the topics in depth be prepare to do additional studying. On the other hand, we give you a lot of working code samples to those who prefer studying by reading code.

This book can be important for busy professionals who don't have time for reading a separate book about each and every library and framework that exist in the HTML5 universe. This book will help them to narrow down the list of technologies and frameworks to be considered for the next project.

Enterprise server-side developers will also benefit from reading this book. Pretty often enterprise Java or .Net developers feel caught off guard when they get a task to create a new Web application with the cross-platform and cross-browser UI. These strong enterprise developers with good business knowledge  may not have enough exposure to how things work in HTML5 domain. This book can be a time saver for all server-side developers who need to start working on the front end of Web applications.

Finally, this book is important because of the way it's written. While learning various frameworks, libraries and approaches to building UI for Web application you'll be writing multiple versions of the same Web application - Save Sick Child. It's a sample application that might have been used to collect donation for children who need medical attention. First we build this application in HTML/JavaScript, then we are re-writing it using jQuery library, then with Ext JS framework. One of the versions shows how to modularize this application. Another version shows how to use WebSockets technology to add an auction to this charity Web application. The final four chapters of the book show different ways of building a mobile version of the same Save Sick Child application. Such approach will help the reader in comparing all these approaches and selecting those that fit the reader's objectives.  

=== What the Goals of the Book Are

First, we want to say what's not the goal of this book. We are not planning to convince you that developing a cross-platform Web application is the right strategy for you. Don't be surprised if after reading this book you'll decide that developing applications in HTML5 is not the right approach for the tasks you have at hands. 

This book should help decision makers in picking the right strategy for developing cross-platform applications that run on a variety of desktop computers as well as mobile devices. 


=== Why the Authors Wrote the book

The authors of this book have ninety years of combined experience in development of enterprise applications. During all these years we've been facing the same challenges regardless of what programming language we use:

* How to make the application code base maintainable
* How to make the application responsive by modularizing its code base
* How to minimize the number of the production issues by proper testing on earlier stages of the project life cycle
* How to design UI that looks good and is convenient for users
* Which frameworks or libraries to pick
* Which design patterns to apply in coding

This list can be easily extended. Ten years ago we've been developing UI mainly in Java, five years ago in Adobe Flex, today in HTML5-related technologies. This book is an attempt to share with the readers our understanding of how to approach the above challenges in HTML5. 

=== How the Book is Organized 

Even though you may decide not to read some of the chapters we still recommend you to skim through them.
Chapters 1, 3, and 4 are must read - if you can't read JavaScript code or are not familiar with CSS, AJAX or JSON, the rest of the book will be difficult to understand. On the other hand, if you're not planning to use, say Ext JS framework, you can just skim through Chapter 6. Following is a brief book outline:

*Introduction* includes a brief discussion of what's the difference between enterprise Web applications and Web sites. It also touches upon the evolution of HTML. 

*Chapter 1*  is an introduction to programming with JavaScript. In about 60 pages we've covered main aspects of this language. No matter what framework you choose, a working knowledge the JavaScript is required.  

*Chapter 2* is a brief overview of selected APIs from  HTML5 specification. They are supported by all modern Web browsers. We find these APIs important and useful for many Web applications.

*Chapter 3* describes the process of mocking up the application Save Sick Child, which will support donations to sick children, embed a video player, integrate with Google maps, and eventually will feature an online auction. We'll show you how to gradually build all the functionality of this Web application while explaining each step of the way. By the end of this chapter we'll have the Web design and the first prototype of this application.

*Chapter 4* is about bringing external data to Web browsers. The code from previous chapters uses only hard-coded data. Now it's time to learn how to make asynchronous server calls and consume the data in  JSON format.

*Chapter 5* shows how to redesign the Save Sick Child application with super popular jQuery library. First, we'll introduce jQuery, and then re-build our charity application with it. In the real world, developers often increase their productivity by using JavaScript libraries and frameworks. The difference between a library and a framework is that the former does not dictate how to structure the code of your application - they simply offer a set of components that will spare you from writing lots of manual code.

*Chapter 6* is a mini tutorial of a comprehensive JavaScript framework called Ext JS. This is one of the most feature-complete frameworks available on the market. Sencha, the company behind Ext JS, managed to extend JavaScript to make its syntax closer to classical object-oriented languages. They also developed and extensive library of the UI components. Expect to see another re-write of the Save Sick child here. This is the largest chapter in this book. 

*Chapter 7* explains how to modularize large applications. Reducing the application startup latency and implementing lazy loading of certain parts of the application are the main reasons for modularization. We'll give you an example of how to build modularized Web applications that won't bring the large and monolithic code to the client's machine, but will rather load the code on as needed basis. You'll also see how to organize the data exchange between different programming modules in a loosely coupled fashion.

*Chapter 8* is dedicated to test-driven development with JavaScript. To shorten the development cycle of your Web application you need to start testing it on the early stages of the project. It seems obvious, but many enterprise IT organizations haven’t adopted agile testing methodologies, which costs them dearly. JavaScript is dynamically typed interpreted language - there is no compiler to help in identifying errors as it’s done in compiled languages like Java. This means that a lot more time should be allocated for testing for JavaScript Web applications. We'll cover the basics of testing and will introduce to to some of the popular testing frameworks for JavaScript application. 

*Chapter 9* shows how to substantially speedup the interaction between the client and the server using  WebSocket protocol introduced in HTML5. HTTP adds a lot of overhead for every request and response object that serve as wrappers for the data. The new version of our Save Sick Child application will include the online auction utilizing WebSocket, and you’ll see an example of using Server-Sent Events for broadcasting the up-to-the-minute donation information. This is what Ian Hickson, the HTML5 spec editor from Google, said about why WebSocket protocol is important: 

"Reducing kilobytes of data to 2 bytes is more than a little more byte efficient, and reducing latency from 150ms (TCP round trip to set up the connection plus a packet for the message) to 50ms (just the packet for the message) is far more than marginal. In fact, these two factors alone are enough to make WebSocket seriously interesting to Google.

*Chapter 10* is a brief introduction to Web application security. You'll learn about vulnerabilities of Web applications and will get references to the documents that contain  recommendations on how to protect your application from attackers. This chapter concludes with some of the application-specific security considerations like the regulatory compliance that your business customers can't ignore.  

*Chapter 11* opens up a discussion of how to approach creating Web applications that should run not only on desktops, but also on mobile devices. In this chapter you'll get familiar with the principles of responsive design, which allows to have a single code base that will be flexible enough to render the UI that looks good on the large and small screens. You'll see the power of CSS _media queries_ that will automatically re-allocate the UI components based on the screen width. The new version of the Save Sick Child application will demonstrate how to go about responsive design.

*Chapter 12* will return you to jQuery, but this time it'll be jQuery Mobile - the library that was specifically created for developing mobile Web applications. But main principles implemented in the larger jQuery library remain in place, and studying the materials from Chapter 5 is a prerequisite for the understanding of this chapter. You'll see yet another version of the Save Sick Child here.

*Chapter 13* is about a little brother of Ext JS - Sencha Touch framework. This framework was developed for the mobile devices, and you'll need to read  Chapter 6 to be able to understand the materials from this one. As usual, we'll develop another version of our sample charity application with Sencha Touch.

*Chapter 14* shows how you can create hybrid mobile applications, which are written with HTML/JavaScript/CSS, but can use the native API of the mobile devices. Hybrids are packaged as native mobile applications and can be submitted to the popular online app stores or market places the same way as if they were written in the programming language native for the mobile platform in question. This chapter will illustrate how to access the camera of the mobile device using the PhoneGap framework.  

=== The Source Code of the Book Examples

The source code of all versions of the Save Sick Child application will be available for download a from O'Reilly at http://shop.oreilly.com/product/0636920028314.do.

The authors of this book also maintain a Web site http://savesickchild.org, where various versions of the Save Sick Child application are deployed so you can see them in action.

== Author BIOs

*Yakov Fain* is is a co-founder of Farata Systems and SuranceBay companies. The first company provides consulting services in the field of enterprise Web development and e-Commerce, and the second one is a software product company, which develops software for the insurance industry. A leader of the Princeton Java Users Group, he has authored several technical books and dozens of articles on software development. Yakov received the title of Java Champion, which is presented to only 150 people worldwide. Yakov also holds an MS in Applied Math. You can reach him at yfain@faratasystems.com and follow him on Twitter @yfain.

*Dr. Victor Rasputnis* is a co-founder of Farata Systems and SuranceBay companies. He spends most of his time providing architectural design, implementation management, and mentoring to companies migrating to e-Commerce technologies with Hybris. Victor has authored several books and dozens of technical articles. He holds a PhD in Computer Science. You can reach Victor at vrasputnis@faratasystems.com.  

*Anatole Tartakovsky* is a co-founder of Farata Systems and SuranceBay companies. He spent more than 25 years developing system and business software. In the last fifteen years, his focus has been on creating frameworks and business applications for dozens of enterprises ranging from Wal-Mart to Wall Street firms. Anatole has authored a number of books and articles on AJAX, Flex, XML, the Internet, and client-server technologies. He holds an MS in Mathematics. You can reach Anatole at atartakovsky@faratasystems.com.

*Viktor Gamov* is a senior software engineer at Farata Systems. He consults financial institutions and startups in design and implementation of Web Applications with HTML5 and Java. A co-organizer of the Princeton Java Users Group, Viktor is passionate about writing a code and about the open source community. He holds MS in Computer Science. You can reach Viktor on email viktor.gamov@faratasystems.com and follow him on Twitter @gamussa.